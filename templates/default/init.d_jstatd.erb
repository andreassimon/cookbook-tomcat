#!/bin/sh
#
# Dynamically generated by Chef on <%= node["fqdn"] %>
# Local modifications will be overwritten by Chef.
#
# <%= @init_script_path %> -- startup script for the jstatd monitoring daemon of the JDK
#
# Written by Andreas Simon <a.simon@quagilis.de>.
#
### BEGIN INIT INFO
# Provides:          jstatd
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start jstatd
# Description:       Start the jstatd monitoring daemon.
### END INIT INFO

set -e

JAVA_HOME="<%= @java_home %>"
PATH=/bin:/usr/bin:/sbin:/usr/sbin:$JAVA_HOME/bin
NAME="jstatd"
DESC="jstatd monitoring daemon"
JSTATD_PID="/var/run/jstatd.pid"
JSTATD_USER="root"
JSTATD_GROUP="root"

if [ `id -u` -ne 0 ]; then
  echo "You need root privileges to run this script"
  exit 1
fi
 
# Make sure jstatd is started with system locale
if [ -r /etc/default/locale ]; then
  . /etc/default/locale
  export LANG
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
  . /etc/default/rcS
fi

case "$1" in
  start)
    if [ -z "$JAVA_HOME" ]; then
      log_failure_msg "no JDK found - please set JAVA_HOME"
      exit 1
    fi

    log_daemon_msg "Starting $DESC" "$NAME"
    if start-stop-daemon --test --start --pidfile "$JSTATD_PID" --user $JSTATD_USER --exec "$JAVA_HOME/bin/jstatd" >/dev/null; then

      set +e
      touch "$JSTATD_PID"
      chown $JSTATD_USER "$JSTATD_PID"
      start-stop-daemon --start --background \
        --user "$JSTATD_USER" \
        --group "$JSTATD_GROUP" \
        --chuid "$JSTATD_USER" \
        --make-pidfile \
        --pidfile "$JSTATD_PID" \
        --exec $JAVA_HOME/bin/jstatd -- \
          -J-Djava.security.policy=/etc/jstatd/jstatd.policy \
          -J-Djava.rmi.server.logCalls=true \
          -J-Djava.rmi.server.hostname=<%= @rmi_server_hostname %>
      set +a -e

      sleep 5
      if start-stop-daemon --test --start \
        --pidfile "$JSTATD_PID" \
        --user $JSTATD_USER \
        --exec "$JAVA_HOME/bin/jstatd" >/dev/null; then

        if [ -f "$JSTATD_PID" ]; then
          rm -f "$JSTATD_PID"
        fi
        log_end_msg 1
      else
        log_end_msg 0
      fi
    else
      log_progress_msg "(already running)"
      log_end_msg 0
    fi
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"

    set +e
    if [ -f "$JSTATD_PID" ]; then 
      start-stop-daemon --stop \
        --pidfile "$JSTATD_PID" \
        --user "$JSTATD_USER" \
        --retry=TERM/20/KILL/5 >/dev/null
      if [ $? -eq 1 ]; then
        log_progress_msg "$DESC is not running but pid file exists, cleaning up"
      elif [ $? -eq 3 ]; then
        PID="`cat $JSTATD_PID`"
        log_failure_msg "Failed to stop $NAME (pid $PID)"
        exit 1
      fi
      rm -f "$JSTATD_PID"
    else
      log_progress_msg "(not running)"
    fi
    log_end_msg 0
    set -e
    ;;
  status)
    set +e
    start-stop-daemon --test --start \
      --pidfile "$JSTATD_PID" \
      --user $JSTATD_USER \
      --exec "$JAVA_HOME/bin/jstatd" \
      >/dev/null 2>&1
    if [ "$?" = "0" ]; then
      if [ -f "$JSTATD_PID" ]; then
        log_success_msg "$DESC is not running, but pid file exists."
        exit 1
      else
        log_success_msg "$DESC is not running."
        exit 3
      fi
    else
      log_success_msg "$DESC is running with pid `cat $JSTATD_PID`"
    fi
    set -e
    ;;
  restart|force-reload)
    if [ -f "$JSTATD_PID" ]; then
      $0 stop
      sleep 1
    fi
    $0 start
    ;;
  *)
    log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
    exit 1
    ;;
esac

exit 0
